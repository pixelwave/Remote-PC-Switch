# PC Control (Rackmount)
#
# (1) Remote Power Control for 4 PCs (Short Press, Long Press)
# (2) Inputs 4 Computers (DP, USB) and Outputs to 2 Terminals (each: 2x DP, 1x USB-C)
#
# !!! T-ETH-Lite -> GPIO34 (34-39) does not support output pin mode.
# !!! T-ETH-Lite -> PC5 Switch disabled
#
# (C) 2024 by Denny Moritz

substitutions:
  comment: "Wake on ESP32 and PC Switch Module."
  device_name: esp32-04-pc-control
  friendly_name: "(BASE) PC Boot & Switch"

  #wifi_ssid: !secret wifi_ssid
  #wifi_password: secret wifi_password
  #api_password: !secret api_password
  #ota_password: !secret ota_password
  #ip: 192.168.22.25

  # PC LED (Sensor)
  led1: GPIO5
  led2: GPIO15
  #led3: GPIO35
  #led4: GPIO38
  # PC Power (Switch)
  pwr1: GPIO4
  pwr2: GPIO2
  #pwr3: GPIO15
  #pwr4: GPIO5
  # DP/USB Switches
  swt1: GPIO13
  swt2: GPIO32
  swt3: GPIO14
  swt4: GPIO33

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  comment: ${comment}
  platformio_options:
    upload_speed: 921600
    build_unflags: -Werror=all
    board_build.flash_mode: dio
    board_build.f_flash: 80000000L
    board_build.f_cpu: 240000000L

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: github://esphome/esphome#6836
    components: [ethernet]

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "..."
  services:
    # home assistant service calls
    - service: switch_pc
      variables:
        terminal: int
        computer: int
      then:
        if:
          condition:
            - script.is_running: script_pc_switch
          then:
            - logger.log: Script is still running!
          else:
            - logger.log: Service called!
            - lambda: |-
                id(gvar_terminal) = terminal;
                id(gvar_computer) = computer;
            - script.execute: script_log_switch_states
            - script.execute: script_pc_switch

ota:
  password: "..."

ethernet:
  type: RTL8201
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 0
  power_pin: GPIO12

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password

#   # Enable fallback hotspot (captive portal) in case wifi connection fails
#   ap:
#     ssid: "Esp32-04-Pc-Switch"
#     password: "vOrU61odB48B"

# captive_portal:

globals:
  # Global Active Terminal:
  #   T1 = Basement
  #   T2 = Office
  - id: gvar_terminal
    type: int
    restore_value: no
    initial_value: "1"
  # Global Active Computer:
  #   1 = Workstation
  #   2 = Mac
  #   3 = Dad-PC
  #   4 = Mom-PC
  - id: gvar_computer
    type: int
    restore_value: no
    initial_value: "1"
  # Hardware Switches
  #   TRUE  = 1 (default port after power out)
  #   FALSE = 0
  # DP Switches
  - id: dp1
    type: bool
    restore_value: no
    initial_value: "true"
  - id: dp2
    type: bool
    restore_value: no
    initial_value: "true"
  - id: dp3
    type: bool
    restore_value: no
    initial_value: "true"
  - id: dp4
    type: bool
    restore_value: no
    initial_value: "true"
  - id: dp5
    type: bool
    restore_value: no
    initial_value: "true"
  - id: dp6
    type: bool
    restore_value: no
    initial_value: "true"
  # USB-C Switches
  - id: usb1
    type: bool
    restore_value: no
    initial_value: "true"
  - id: usb2
    type: bool
    restore_value: no
    initial_value: "true"
  - id: usb3
    type: bool
    restore_value: no
    initial_value: "true"
  - id: usb4
    type: bool
    restore_value: no
    initial_value: "true"

script:
  # PC Switch Script
  - id: script_pc_switch
    then:
      # HA input var "terminal" -> Terminal (1,2) = gvar_terminal
      # HA input var "computer" -> PC (1,2,3,4) = gvar_computer
      # Terminal 1
      - if:
          condition:
            lambda: "return (id(gvar_terminal) == 1);"
          then:
            # PC1 (Workstation)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 1);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp1) == false);"
                      then:
                        - switch.turn_on: sw1
                  - if:
                      condition:
                        lambda: "return (id(dp6) == true);"
                      then:
                        - switch.turn_on: sw4
                  - logger.log: "SWITCH EXEC: T1 = PC1"
            # PC2 (Mac)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 2);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp1) == true);"
                      then:
                        - switch.turn_on: sw1
                  - if:
                      condition:
                        lambda: "return (id(dp3) == true);"
                      then:
                        - switch.turn_on: sw2
                  - if:
                      condition:
                        lambda: "return (id(dp5) == false);"
                      then:
                        - switch.turn_on: sw3
                  - logger.log: "SWITCH EXEC: T1 = PC2"
            # PC3 (Dad-PC)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 3);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp1) == true);"
                      then:
                        - switch.turn_on: sw1
                  - if:
                      condition:
                        lambda: "return (id(dp5) == true);"
                      then:
                        - switch.turn_on: sw3
                  - logger.log: "SWITCH EXEC: T1 = PC3"
      # Terminal 2
      - if:
          condition:
            lambda: "return (id(gvar_terminal) == 2);"
          then:
            # PC1 (Workstation)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 1);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp1) == true);"
                      then:
                        - switch.turn_on: sw1
                  - if:
                      condition:
                        lambda: "return (id(dp3) == true);"
                      then:
                        - switch.turn_on: sw2
                  - if:
                      condition:
                        lambda: "return (id(dp6) == false);"
                      then:
                        - switch.turn_on: sw4
                  - logger.log: "SWITCH EXEC: T2 = PC1"
            # PC2 (Mac)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 2);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp1) == false);"
                      then:
                        - switch.turn_on: sw1
                  - if:
                      condition:
                        lambda: "return (id(dp3) == false);"
                      then:
                        - switch.turn_on: sw2
                  - if:
                      condition:
                        lambda: "return (id(dp5) == true);"
                      then:
                        - switch.turn_on: sw3
                  - logger.log: "SWITCH EXEC: T2 = PC2"
            # PC4 (Mom-PC)
            - if:
                condition:
                  lambda: "return (id(gvar_computer) == 4);"
                then:
                  - if:
                      condition:
                        lambda: "return (id(dp3) == true);"
                      then:
                        - switch.turn_on: sw2
                  - if:
                      condition:
                        lambda: "return (id(dp6) == true);"
                      then:
                        - switch.turn_on: sw4
                  - logger.log: "SWITCH EXEC: T2 = PC4"
      # End of Script executions
      - script.execute: script_log_switch_states
      - logger.log: "DONE EXEC - COMPUTER SWITCH (Waiting 4sec)"
      - delay: 4s
  # Log Output Script
  - id: script_log_switch_states
    then:
      - logger.log:
          format: "DP STATES: dp1=%d dp2=%d dp3=%d dp4=%d dp5=%d dp6=%d"
          args:
            ["id(dp1)", "id(dp2)", "id(dp3)", "id(dp4)", "id(dp5)", "id(dp6)"]
      - logger.log:
          format: "USB STATES: usb1=%d usb2=%d usb3=%d usb4=%d"
          args: ["id(usb1)", "id(usb2)", "id(usb3)", "id(usb4)"]

binary_sensor:
  # PC LED -----------------
  - platform: gpio
    pin:
      number: $led1
      mode: INPUT_PULLUP
      inverted: true
    name: "PC 1 - STATE"
    icon: "mdi:lightbulb-question"
  - platform: gpio
    pin:
      number: $led2
      mode: INPUT_PULLUP
      inverted: true
    name: "PC 2 - STATE"
    icon: "mdi:lightbulb-question"
  # - platform: gpio
  #   pin:
  #     number: $led3
  #     #mode: INPUT_PULLUP
  #     #inverted: true
  #   name: "PC 3 - STATE"
  #   icon: "mdi:lightbulb-question"
  # - platform: gpio
  #   pin:
  #     number: $led4
  #     #mode: INPUT_PULLUP
  #     #inverted: true
  #   name: "PC 4 - STATE"
  #   icon: "mdi:lightbulb-question"

switch:
  # PC POWER -----------------
  # PC 1
  - platform: gpio
    pin:
      number: $pwr1
      allow_other_uses: true
    id: spPC1
    name: "PC 1 - Short Press"
    icon: "mdi:power"
    on_turn_on:
      - delay: 150ms
      - switch.turn_off: spPC1
  - platform: gpio
    pin:
      number: $pwr1
      allow_other_uses: true
    id: lpPC1
    name: "PC 1 - Long Press"
    icon: "mdi:power"
    on_turn_on:
      - delay: 5000ms
      - switch.turn_off: lpPC1
  # PC 2
  - platform: gpio
    pin:
      number: $pwr2
      allow_other_uses: true
    id: spPC2
    name: "PC 2 - Short Press"
    icon: "mdi:power"
    on_turn_on:
      - delay: 150ms
      - switch.turn_off: spPC2
  - platform: gpio
    pin:
      number: $pwr2
      allow_other_uses: true
    id: lpPC2
    name: "PC 2 - Long Press"
    icon: "mdi:power"
    on_turn_on:
      - delay: 5000ms
      - switch.turn_off: lpPC2
  # PC 3
  # - platform: gpio
  #   pin:
  #     number: $pwr3
  #     allow_other_uses: true
  #   id: spPC3
  #   name: "PC 3 - Short Press"
  #   icon: "mdi:power"
  #   on_turn_on:
  #   - delay: 150ms
  #   - switch.turn_off: spPC3
  # - platform: gpio
  #   pin:
  #     number: $pwr3
  #     allow_other_uses: true
  #   id: lpPC3
  #   name: "PC 3 - Long Press"
  #   icon: "mdi:power"
  #   on_turn_on:
  #   - delay: 5000ms
  #   - switch.turn_off: lpPC3
  # PC 4
  # - platform: gpio
  #   pin:
  #     number: $pwr4
  #     allow_other_uses: true
  #   id: spPC4
  #   name: "PC 4 - Short Press"
  #   icon: "mdi:power"
  #   on_turn_on:
  #   - delay: 150ms
  #   - switch.turn_off: spPC4
  # - platform: gpio
  #   pin:
  #     number: $pwr4
  #     allow_other_uses: true
  #   id: lpPC4
  #   name: "PC 4 - Long Press"
  #   icon: "mdi:power"
  #   on_turn_on:
  #   - delay: 5000ms
  #   - switch.turn_off: lpPC4

  # PC Switch -----------------
  # Switch 1
  - platform: gpio
    pin:
      number: $swt1
    id: sw1
    name: "Switch 1"
    icon: "mdi:power"
    on_turn_on:
      - lambda: |-
          id(dp1) = !id(dp1);
          id(dp2) = !id(dp2);
          id(usb1) = !id(usb1);
      - delay: 50ms
      - switch.turn_off: sw1
  # Switch 2
  - platform: gpio
    pin:
      number: $swt2
    id: sw2
    name: "Switch 2"
    icon: "mdi:power"
    on_turn_on:
      - lambda: |-
          id(dp3) = !id(dp3);
          id(dp4) = !id(dp4);
          id(usb2) = !id(usb2);
      - delay: 50ms
      - switch.turn_off: sw2
  # Switch 3
  - platform: gpio
    pin:
      number: $swt3
    id: sw3
    name: "Switch 3"
    icon: "mdi:power"
    on_turn_on:
      - lambda: |-
          id(dp5) = !id(dp5);
          id(usb3) = !id(usb3);
      - delay: 50ms
      - switch.turn_off: sw3
  # Switch 4
  - platform: gpio
    pin:
      number: $swt4
    id: sw4
    name: "Switch 4"
    icon: "mdi:power"
    on_turn_on:
      - lambda: |-
          id(dp6) = !id(dp6);
          id(usb4) = !id(usb4);
      - delay: 50ms
      - switch.turn_off: sw4
